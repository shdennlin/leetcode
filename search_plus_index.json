{"./":{"url":"./","title":"Introduction","keywords":"","body":"Leetcode Solution Record This website is my LeetCode Solution record with Python. Solution Reference LeetCode with Javascript qiyuangong/leetcode Classification List of LeetCode question to cover all the concepts and type of questions Author Shawn Dennis Lin Email: shawndennislin@gmail.com GitHub: https://github.com/shdennlin Blog: https://blog.shdennlin.com Copyright (c) 2021 shdennlin all right reserved，powered by GitbookLast modified by shdennlin 2021-09-17 17:02 "},"content/Array/001_Two_Sum.html":{"url":"content/Array/001_Two_Sum.html","title":"001 Two Sum","keywords":"","body":"LeetCode 001. Two Sum Question link: https://leetcode.com/problems/two-sum/ Solution Pythonclass Solution: def twoSum(self, nums: 'List[int]', target: int) -> 'List[int]': for i in range(len(nums)): for j in range(i+1, len(nums)): t = nums[i] + nums[j] if t == target: return [i, j] My Solution Link: 001 Two Sum.py Copyright (c) 2021 shdennlin all right reserved，powered by GitbookLast modified by shdennlin 2021-09-17 17:02 "},"content/Linked List/021_Merge_Two_Sorted_Lists.html":{"url":"content/Linked List/021_Merge_Two_Sorted_Lists.html","title":"021 Merge Two Sorted Lists","keywords":"","body":"LeetCode 021. Merge Two Sorted Lists Question link: https://leetcode.com/problems/merge-two-sorted-lists/ Solution Pythonclass Solution: def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]: dummy = curr = ListNode(None) while l1 and l2: if l1.val = l2.val: curr.next = l2 curr = curr.next l2 = l2.next curr.next = l1 or l2 return dummy.next Ref: [Day 5] 從LeetCode學演算法 - 0021. Merge Two Sorted Lists (Easy) My Solution Link: 021 Merge Two Sorted Lists.py Copyright (c) 2021 shdennlin all right reserved，powered by GitbookLast modified by shdennlin 2021-09-17 17:02 "},"content/Number/007_Reverse_Integer.html":{"url":"content/Number/007_Reverse_Integer.html","title":"007 Reverse Integer","keywords":"","body":"LeetCode 007. Reverse Integer Question link: https://leetcode.com/problems/reverse-integer/ Solution Pythonclass Solution: def reverse(self, x: int) -> int: if x = 2147483647 or res == 0: return 0 return res * isPos My Solution Link: 007 Reverse Integer.py Copyright (c) 2021 shdennlin all right reserved，powered by GitbookLast modified by shdennlin 2021-09-17 17:02 "},"content/String/009_Palindrome_Number.html":{"url":"content/String/009_Palindrome_Number.html","title":"009 Palindrome Number","keywords":"","body":"LeetCode 009. Palindrome Number Question link: https://leetcode.com/problems/palindrome-number/ Solution convert to string Pythonclass Solution: def isPalindrome(self, x: int) -> bool: if (x >= 0): return x == int(str(x)[::-1]) return False without convert to String Pythonclass Solution: def isPalindrome(self, x: int) -> bool: if x 0): return False res = 0 while x > res: res = res * 10 + x % 10 x = x // 10 return res == x or res // 10 == x My Solution Link: 009 Palindrome Number.py Copyright (c) 2021 shdennlin all right reserved，powered by GitbookLast modified by shdennlin 2021-09-17 17:02 "},"content/String/013_Roman_To_Integer.html":{"url":"content/String/013_Roman_To_Integer.html","title":"013 Roman To Integer","keywords":"","body":"LeetCode 013. Roman To Integer Question link: https://leetcode.com/problems/roman-to-integer/ Solution Pythonclass Solution: def romanToInt(self, s: str) -> int: roman = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } n = len(s) num = 0 for i, let in enumerate(s): if i + 1 My Solution Link: 013 Roman To Integer.py Copyright (c) 2021 shdennlin all right reserved，powered by GitbookLast modified by shdennlin 2021-09-17 17:02 "},"content/String/014_Longest_Common_Prefix.html":{"url":"content/String/014_Longest_Common_Prefix.html","title":"014 Longest Common Prefix","keywords":"","body":"LeetCode 014. Longest Common Prefix Questions link: https://leetcode.com/problems/longest-common-prefix/ Solution Pythonclass Solution: def longestCommonPrefix(self, strs: List[str]) -> str: ret = strs[0] if len(strs) == 1: return ret while True: retC = True for letter in strs[1:]: if letter.startswith(ret): continue else: ret = ret[:-1] retC = False break if retC == True: return ret My Solution Link: 014 Longest Common Prefix.py Copyright (c) 2021 shdennlin all right reserved，powered by GitbookLast modified by shdennlin 2021-09-17 17:02 "},"content/String/020_Valid_Parentheses.html":{"url":"content/String/020_Valid_Parentheses.html","title":"020 Valid Parentheses","keywords":"","body":"LeetCode 020. Valid Parentheses Question link: https://leetcode.com/problems/valid-parentheses/ Solution Pythonclass Solution: def isValid(self, s: str) -> bool: m = {'(': ')', '[': ']', '{': '}'} stack = [] for i in s: if i in m: stack.append(m[i]) elif len(stack) > 0 and i == stack[-1]: stack.pop() else: return False return len(stack) == 0 Ref: Simple python solution (4ms, 13,5mb memory usage)) My Solution Link: 020 Valid Parentheses.py Copyright (c) 2021 shdennlin all right reserved，powered by GitbookLast modified by shdennlin 2021-09-17 17:02 "}}